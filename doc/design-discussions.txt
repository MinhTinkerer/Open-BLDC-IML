In this file we are collecting some documentation about the design
decisions made during the process of Open-BLDC development.

Everyone may add his thoughts and ideas to this file to comment on the
topics... we will see how it works out ;)

1 Schematics Design
-------------------

1.1 Parts
---------

1.1.1 Microcontroller Selection
-------------------------------

Esden (26.12.2008) 
------------------ 

The decision for using Atmega168 is not solely mine. First of all I
wanted to use an Atmega. Most people know these embedded processors
well and like it. It is used in the some BLDC controllers I know and
they seem to have enough power to drive this application. So the first
choice was to use an Atmega 8. Later I discussed the project with some
guys in #uavp and MrSputnik said that I should take a look at at90pwm3
because there are some really good application notes describing BLDC
controllers built on the basis of at90pwm3. I redesigned everything
based on the application notes. In the next step MarkusBec said that
at90 is a bad choice because it is an old controller and as it was
missing I2C bus hardware support it was not worth using (the reason is
that the hardware support contained in at90pwm3 to make driving BLD's
easier, is not conserving the amount of code that is needed to drive
I2C by hand). So the schematics got redesigned to use the Atmega168. It
has reasonably good PWM support, it has a comparator for commutation
detection and I2C hardware support. Additionally, it has more flash than
its smaller brothers and sisters, which is nice to have.

2 Board Design
--------------

2.1 Layer Count
---------------

Esden (26.12.2008)
------------------

The first board designs have only two layers because I don't know how
and if it is even possible to do in the free version of Eagle. And
making 2 layer prototypes is already expensive enough.

Why not 1 layer? Because perhaps I think it is too complicated to
layout the board in a reasonable size in 1 layer. Convince me
otherwise! Your contributions are welcome! ^^

2.2 Fet Drivers
---------------

Esden (26.12.2008)
------------------

Why we are using fet drivers? I have to be honest that I don't exactly
know why. But it has something to do with capacitance in the fets we
are using for the low side. And we use these because it is what makes
the controllers higher quality. At least that is what electrical
engineers tell me. Perhaps someone with such deeper knowledge about
this topic can add a useful explanation?

[TODO: add more useful reason]

2.3 N-Channel MOSFETs VS. P- and N-Channel MOSFETs
--------------------------------------------------

Esden (26.12.2008)
------------------

We use for the low and high side of the phase drivers N-Channel
MOSFETs. In other designs they use N-Channel MOSFETs for the high side
and P-Channel MOSFETs for the low side.

For the reason why we do it this way see the "Fet drivers" section.
I really don't know. The reason is the same as for the
drivers. Electrical engineers tell me that it is good. ;)

[TODO: add more useful reason]

2.4 Fets Placement
------------------

Esden (26.12.2008)
------------------

The version of the Open-BLDC board (as introduced in 3a84d6e) has its
low and high side fets distributed on the front and backside of the
board. I tried to put all fets on one side of the board and the
control electronics on the other side. The problem is that the fets,
supply lines and phase lines are using up completely all space on one
side of the board (I tried using the backside for fets placement)
and some space on the other side (I will add the one-sided version for
reference soon). The problem is that placing the Atmega on the other
side is already a big problem. There are many signal lines that are
crossing each other that have to be connected to the Atmega. 

It is damn difficult to untangle all that mess. If someone has the nerve
and patience to resolve this issue and rewire everything that this
design is feasbible please let me know. It may be a better to cool and
smaller solution than the one I am using currently.

Also a 3 or more layer design may be helpful here. It may be a nice
thing to try in the future but I think a 2 layer design is expensive
enough for the beginning. ^^
